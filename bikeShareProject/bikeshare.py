# -*- coding: utf-8 -*-
"""bikeShareProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XgiGKYMCvXZ8oW8BEJAKyldux5r2eQxb

Mounting the Drive and Importing the needed libs
"""

#Mount the drive to get the data
#mount Google drive
# from google.colab import drive
# drive.mount("/content/drive")
# !ls "drive/My Drive/bikeshare/data"

import pandas as pd
import numpy as np
from scipy import stats
import time

"""## First Part (Understanding The Data)"""


# """**Filter The dataset**"""


CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - pandas DataFrame containing city data filtered by month and day
    """
    
    # load data file into a dataframe
    filename = CITY_DATA[city]
    print(filename)
    df = pd.read_csv(filename)

    # convert the Start Time column to datetime
    dateTime = pd.to_datetime(df['Start Time'])
    df['Start Time'] = dateTime

    # extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.dayofweek
    # print(df['month'])
    # print(df['day_of_week'])

    # filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1
        # print("Index:        ",month)
        # filter by month to create the new dataframe
        
        df = df[df['month']==month]
        #print("Filtered Data By Given Filters \n",'-'*40,'\n',df_month)

    # filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        weekdays = ['monday','tuesday','wednesday','thurthday','friday','saturday','sunday']
        day = weekdays.index(day) 
        df = df[df['day_of_week']==day]
#         print(df_month_day)
    
    return df
    
# df = load_data('chicago', 'march', 'friday')
# print(df)

def get_city():
  print('Please enter one of the following cities (\'Chicago, Washington or New York)')
  while(True):
      city = str(input()).lower()
      if( city != 'chicago' and  city != 'washington' and  city != 'new york' ):
        print("Error, Please enter one of the following cities (\'chicago, washington or New York) only!")
      else:
        break
  return city
def get_month():
  months = np.array(['january', 'february', 'march', 'april', 'may', 'june'])
  print('Please enter one of the following months to filter the data with, if none then enter \'all\'. \n',months)
  while(True):
      month = str(input()).lower()
      if( month  not in months and month != 'all' ):
        print("Error, Please enter one of the following months only or \'all\' ! \n",months)
      else:
        break
  return month
def get_day():
  weekdays = np.array(['monday','tuesday','wednesday','thurthday','friday','saturday','sunday'])
  print('Please enter one of the following days to filter the data with, if none then enter \'all\'. \n',weekdays)
  while(True):
      day = str(input()).lower()
      if( day not in weekdays and day != 'all' ):
        print("Error, Please enter one of the following weekdays only or \'all\' ! \n",weekdays)
      else:
        break
  return day
def get_filters():
  print('Hello to the Bike Share Project: \t Done by Youssef M. Hussien')
  city  = get_city()
  month = get_month()
  day = get_day()
  print('-'*40)
  return {'city':city , 'month':month , 'day':day}
  
def time_stats(df):
    """Displays statistics on the most frequent times of travel."""
    weekdays = np.array(['monday','tuesday','wednesday','thurthday','friday','saturday','sunday'])
    months = np.array(['january', 'february', 'march', 'april', 'may', 'june'])
    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    month = df['month'].mode()
    print("Most Common Month {0} ".format(months[month[0]-1]))

    # TO DO: display the most common day of week
    day = df['day_of_week'].mode()
    print("Most Common Day of week {0} ".format(weekdays[day[0]]))

    # TO DO: display the most common start hour
    
    # load data file into a dataframe
    #Making a copy of the datafrae to work on to not miss things around

    # convert the Start Time column to datetime
    dateTime = pd.to_datetime(df['Start Time'])
    df['Start Time'] = dateTime

    # extract hour from the Start Time column to create an hour column
    df['hour'] = df['Start Time'].dt.hour

    popular_hour = df['hour'].mode()
    print('Most Frequent Start Hour (0-24):', popular_hour[0])

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    common = df['Start Station'].mode()
    start_common = common[0]
    print("Most Commonly Used Start Station is {0} .\n".format(start_common))
    # TO DO: display most commonly used end station
    common2 = df['End Station'].mode()
    end_common = common2[0]
    print("Most Commonly Used End Station is {0} .\n".format(end_common))
    # TO DO: display most frequent combination of start station and end station trip
    df['combination'] = df['Start Station'] + " " + df['End Station']
    common3 = df['combination'].mode()
    print("The most frequent combination of start station and end station trip is: \n {0}".format(common3[0]))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    total  = df['Trip Duration'].sum()
    print("Total Travel Time is {0} .\n".format(total))

    # TO DO: display mean travel time
    mean =  df['Trip Duration'].mean()
    print("Mean Travel Time is {0} .\n".format(mean))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df, city):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    user_types = df['User Type'].value_counts()
    print("User Types Information:\n",user_types)
    if(city != "washington"): #
        # TO DO: Display counts of gender
        gender = df['Gender'].value_counts()
        print("Gender information:\n",gender)

        # TO DO: Display earliest, most recent, and most common year of birth
        earliest = df['Birth Year'].min()
        recent = df['Birth Year'].max()
        common = df['Birth Year'].mode()
        print("The earliest birth year is {0} and the most recent one is {1} and the most common one is {2}".format(earliest, recent,common[0]))

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def main():
    while True:
        print('Please enter a weekday to filter your data with i.e (Monday), if none then enter \'all\' .')
        filters = get_filters()
        print(filters)
        city = filters['city']
        month = filters['month']
        day = filters['day']
        print("Your inputted Filters are as follows: \t",city, month , day)
        print('-'*40)
        # this part is to handle the input as new york to be cnverted to the correct name of the dataset we are having
        if(city == "new york"):
          city = 'new york city'
        df_result = load_data(city , month , day)
        print('-'*40)
        print("Your Final data after filters is: \n",df_result)
        print('-'*40)
#         print(df_result.columns)
        time_stats(df_result)
        station_stats(df_result)
        trip_duration_stats(df_result)
        user_stats(df_result,city)
        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break
    print("Okay Thank you for your time, hope to see you soon :)")



if __name__ == "__main__":
    main()



